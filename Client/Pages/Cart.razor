@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else if(orderPlaced)
{
    <span>Thank you for your order! You can check your orders <a href="orders">here</a>.</span>
}
else
{
    <div>
        @foreach (var c in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@c.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@c.ProductId">@c.Title</a></h5>
                    <span>@c.ProductType</span><br />
                    <input class="form-control input-quantity" type="number" min="1" value="@c.Quantity" @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, c))" />
                    <button class="btn-delete" @onclick="@(()=> RemoveProductFromCart(c.ProductId, c.ProductTypeId))">Delete</button>
                </div>
                <div class="cart-product-price">
                    $@(c.Price * c.Quantity)
                </div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(p => p.Price * p.Quantity)
        </div>
    </div>
    <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Place Order</button>
}

@code {
    List<CartProductResult> cartProducts = null;
    string message = "Loading cart...";
    bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        orderPlaced = false;
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
            cartProducts = new List<CartProductResult>();
        }
        else
        {
            cartProducts = await CartService.GetCartProducts();
        }
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResult cartProduct)
    {
        cartProduct.Quantity = int.Parse(e.Value.ToString());
        if (cartProduct.Quantity < 1 || cartProduct.Quantity == null)
            cartProduct.Quantity = 1;
        await CartService.UpdateQuantity(cartProduct);
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.GetCartItemsCount();
        orderPlaced = true;
    }
}
